using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

public class OptimalAlgorithm : MonoBehaviour
{
    public Text pageQueueText;
    public Text memorySlotsText;
    public Text resultText;
    public Button nextStepButton;

    private List<int> memorySlots = new List<int>();
    private List<int> pageRequests = new List<int> { 1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5 }; // Example
    private int memorySize = 3; // Number of available slots
    private int currentRequestIndex = 0;
    private int pageFaults = 0;

    void Start()
    {
        UpdateUI();
        nextStepButton.onClick.AddListener(ProcessNextStep);
    }

    void ProcessNextStep()
    {
        if (currentRequestIndex >= pageRequests.Count)
        {
            resultText.text = "Simulation Complete! Page Faults: " + pageFaults;
            nextStepButton.interactable = false;
            return;
        }

        int currentPage = pageRequests[currentRequestIndex];

        if (!memorySlots.Contains(currentPage))
        {
            if (memorySlots.Count >= memorySize)
            {
                // Determine the page to replace
                int pageToReplace = FindPageToReplace();
                memorySlots.Remove(pageToReplace);
            }
            memorySlots.Add(currentPage);
            pageFaults++;
        }

        currentRequestIndex++;
        UpdateUI();
    }

    int FindPageToReplace()
    {
        int farthestIndex = -1;
        int pageToReplace = -1;

        foreach (int page in memorySlots)
        {
            int nextUseIndex = pageRequests.IndexOf(page, currentRequestIndex + 1);
            if (nextUseIndex == -1) // If not used again
            {
                return page;
            }
            if (nextUseIndex > farthestIndex)
            {
                farthestIndex = nextUseIndex;
                pageToReplace = page;
            }
        }
        return pageToReplace;
    }

    void UpdateUI()
    {
        pageQueueText.text = "Page Queue: " + string.Join(", ", pageRequests);
        memorySlotsText.text = "Memory Slots: " + string.Join(", ", memorySlots);
        resultText.text = "Page Faults: " + pageFaults;
    }
}
